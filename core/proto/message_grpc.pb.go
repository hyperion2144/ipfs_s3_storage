// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileChannel_Add_FullMethodName    = "/peer.FileChannel/Add"
	FileChannel_Remove_FullMethodName = "/peer.FileChannel/Remove"
	FileChannel_Move_FullMethodName   = "/peer.FileChannel/Move"
)

// FileChannelClient is the client API for FileChannel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileChannelClient interface {
	// Add file.
	Add(ctx context.Context, opts ...grpc.CallOption) (FileChannel_AddClient, error)
	// Remove file.
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error)
	// Move file.
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveReply, error)
}

type fileChannelClient struct {
	cc grpc.ClientConnInterface
}

func NewFileChannelClient(cc grpc.ClientConnInterface) FileChannelClient {
	return &fileChannelClient{cc}
}

func (c *fileChannelClient) Add(ctx context.Context, opts ...grpc.CallOption) (FileChannel_AddClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileChannel_ServiceDesc.Streams[0], FileChannel_Add_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileChannelAddClient{stream}
	return x, nil
}

type FileChannel_AddClient interface {
	Send(*AddRequest) error
	CloseAndRecv() (*AddReply, error)
	grpc.ClientStream
}

type fileChannelAddClient struct {
	grpc.ClientStream
}

func (x *fileChannelAddClient) Send(m *AddRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileChannelAddClient) CloseAndRecv() (*AddReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileChannelClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error) {
	out := new(RemoveReply)
	err := c.cc.Invoke(ctx, FileChannel_Remove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileChannelClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveReply, error) {
	out := new(MoveReply)
	err := c.cc.Invoke(ctx, FileChannel_Move_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileChannelServer is the server API for FileChannel service.
// All implementations must embed UnimplementedFileChannelServer
// for forward compatibility
type FileChannelServer interface {
	// Add file.
	Add(FileChannel_AddServer) error
	// Remove file.
	Remove(context.Context, *RemoveRequest) (*RemoveReply, error)
	// Move file.
	Move(context.Context, *MoveRequest) (*MoveReply, error)
	mustEmbedUnimplementedFileChannelServer()
}

// UnimplementedFileChannelServer must be embedded to have forward compatible implementations.
type UnimplementedFileChannelServer struct {
}

func (UnimplementedFileChannelServer) Add(FileChannel_AddServer) error {
	return status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedFileChannelServer) Remove(context.Context, *RemoveRequest) (*RemoveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedFileChannelServer) Move(context.Context, *MoveRequest) (*MoveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedFileChannelServer) mustEmbedUnimplementedFileChannelServer() {}

// UnsafeFileChannelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileChannelServer will
// result in compilation errors.
type UnsafeFileChannelServer interface {
	mustEmbedUnimplementedFileChannelServer()
}

func RegisterFileChannelServer(s grpc.ServiceRegistrar, srv FileChannelServer) {
	s.RegisterService(&FileChannel_ServiceDesc, srv)
}

func _FileChannel_Add_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileChannelServer).Add(&fileChannelAddServer{stream})
}

type FileChannel_AddServer interface {
	SendAndClose(*AddReply) error
	Recv() (*AddRequest, error)
	grpc.ServerStream
}

type fileChannelAddServer struct {
	grpc.ServerStream
}

func (x *fileChannelAddServer) SendAndClose(m *AddReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileChannelAddServer) Recv() (*AddRequest, error) {
	m := new(AddRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileChannel_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileChannelServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileChannel_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileChannelServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileChannel_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileChannelServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileChannel_Move_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileChannelServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileChannel_ServiceDesc is the grpc.ServiceDesc for FileChannel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileChannel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "peer.FileChannel",
	HandlerType: (*FileChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Remove",
			Handler:    _FileChannel_Remove_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _FileChannel_Move_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Add",
			Handler:       _FileChannel_Add_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
